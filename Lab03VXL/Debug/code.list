
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800290c  0800290c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800290c  0800290c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800290c  0800290c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800290c  0800290c  0001290c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002910  08002910  00012910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000001c  08002930  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002930  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bf8  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e05  00000000  00000000  00029c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f2  00000000  00000000  0002ce98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd64  00000000  00000000  0004418a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082796  00000000  00000000  00050eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f4  00000000  00000000  000d36d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028d0 	.word	0x080028d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080028d0 	.word	0x080028d0

0800014c <get_input_button>:

uint32_t timeForKeyPress[BUTTON];

uint8_t PressedFlag[BUTTON];

void get_input_button(uint8_t index, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	80bb      	strh	r3, [r7, #4]
	KeyReg0[index] = KeyReg1[index];
 800015c:	79fa      	ldrb	r2, [r7, #7]
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	490b      	ldr	r1, [pc, #44]	; (8000190 <get_input_button+0x44>)
 8000162:	5c89      	ldrb	r1, [r1, r2]
 8000164:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <get_input_button+0x48>)
 8000166:	54d1      	strb	r1, [r2, r3]
	KeyReg1[index] = KeyReg2[index];
 8000168:	79fa      	ldrb	r2, [r7, #7]
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	490a      	ldr	r1, [pc, #40]	; (8000198 <get_input_button+0x4c>)
 800016e:	5c89      	ldrb	r1, [r1, r2]
 8000170:	4a07      	ldr	r2, [pc, #28]	; (8000190 <get_input_button+0x44>)
 8000172:	54d1      	strb	r1, [r2, r3]
	KeyReg2[index] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000174:	79fc      	ldrb	r4, [r7, #7]
 8000176:	88bb      	ldrh	r3, [r7, #4]
 8000178:	4619      	mov	r1, r3
 800017a:	6838      	ldr	r0, [r7, #0]
 800017c:	f001 fb7c 	bl	8001878 <HAL_GPIO_ReadPin>
 8000180:	4603      	mov	r3, r0
 8000182:	461a      	mov	r2, r3
 8000184:	4b04      	ldr	r3, [pc, #16]	; (8000198 <get_input_button+0x4c>)
 8000186:	551a      	strb	r2, [r3, r4]
}
 8000188:	bf00      	nop
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bd90      	pop	{r4, r7, pc}
 8000190:	2000009c 	.word	0x2000009c
 8000194:	20000090 	.word	0x20000090
 8000198:	200000a8 	.word	0x200000a8

0800019c <get_pressed_flag>:

uint8_t get_pressed_flag(uint8_t index){
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]
	return PressedFlag[index];
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	4a03      	ldr	r2, [pc, #12]	; (80001b8 <get_pressed_flag+0x1c>)
 80001aa:	5cd3      	ldrb	r3, [r2, r3]
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	370c      	adds	r7, #12
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	20000078 	.word	0x20000078

080001bc <set_pressed_flag>:
void set_pressed_flag(uint8_t index){
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
	PressedFlag[index] = 0;
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <set_pressed_flag+0x1c>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	54d1      	strb	r1, [r2, r3]
}
 80001ce:	bf00      	nop
 80001d0:	370c      	adds	r7, #12
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000078 	.word	0x20000078

080001dc <getInputKey>:

void getInputKey(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	get_input_button(0, Button1_GPIO_Port, Button1_Pin);
 80001e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001e6:	4935      	ldr	r1, [pc, #212]	; (80002bc <getInputKey+0xe0>)
 80001e8:	2000      	movs	r0, #0
 80001ea:	f7ff ffaf 	bl	800014c <get_input_button>
	get_input_button(1, Button2_GPIO_Port, Button2_Pin);
 80001ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80001f2:	4932      	ldr	r1, [pc, #200]	; (80002bc <getInputKey+0xe0>)
 80001f4:	2001      	movs	r0, #1
 80001f6:	f7ff ffa9 	bl	800014c <get_input_button>
	get_input_button(2, Button3_GPIO_Port, Button3_Pin);
 80001fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001fe:	492f      	ldr	r1, [pc, #188]	; (80002bc <getInputKey+0xe0>)
 8000200:	2002      	movs	r0, #2
 8000202:	f7ff ffa3 	bl	800014c <get_input_button>
	int no_of_used_button = 3;
 8000206:	2303      	movs	r3, #3
 8000208:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < no_of_used_button; i++){
 800020a:	2300      	movs	r3, #0
 800020c:	71fb      	strb	r3, [r7, #7]
 800020e:	e04b      	b.n	80002a8 <getInputKey+0xcc>
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	4a2b      	ldr	r2, [pc, #172]	; (80002c0 <getInputKey+0xe4>)
 8000214:	5cd2      	ldrb	r2, [r2, r3]
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	492a      	ldr	r1, [pc, #168]	; (80002c4 <getInputKey+0xe8>)
 800021a:	5ccb      	ldrb	r3, [r1, r3]
 800021c:	429a      	cmp	r2, r3
 800021e:	d140      	bne.n	80002a2 <getInputKey+0xc6>
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a28      	ldr	r2, [pc, #160]	; (80002c4 <getInputKey+0xe8>)
 8000224:	5cd2      	ldrb	r2, [r2, r3]
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	4927      	ldr	r1, [pc, #156]	; (80002c8 <getInputKey+0xec>)
 800022a:	5ccb      	ldrb	r3, [r1, r3]
 800022c:	429a      	cmp	r2, r3
 800022e:	d138      	bne.n	80002a2 <getInputKey+0xc6>

			if(KeyReg3[i] != KeyReg2[i]){
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	4a26      	ldr	r2, [pc, #152]	; (80002cc <getInputKey+0xf0>)
 8000234:	5cd2      	ldrb	r2, [r2, r3]
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4923      	ldr	r1, [pc, #140]	; (80002c8 <getInputKey+0xec>)
 800023a:	5ccb      	ldrb	r3, [r1, r3]
 800023c:	429a      	cmp	r2, r3
 800023e:	d014      	beq.n	800026a <getInputKey+0x8e>
				KeyReg3[i] = KeyReg2[i];
 8000240:	79fa      	ldrb	r2, [r7, #7]
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	4920      	ldr	r1, [pc, #128]	; (80002c8 <getInputKey+0xec>)
 8000246:	5c89      	ldrb	r1, [r1, r2]
 8000248:	4a20      	ldr	r2, [pc, #128]	; (80002cc <getInputKey+0xf0>)
 800024a:	54d1      	strb	r1, [r2, r3]
				if(KeyReg2[i] == PRESSED_STATE){
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	4a1e      	ldr	r2, [pc, #120]	; (80002c8 <getInputKey+0xec>)
 8000250:	5cd3      	ldrb	r3, [r2, r3]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d125      	bne.n	80002a2 <getInputKey+0xc6>
					//todo
					PressedFlag[i] = 1;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	4a1d      	ldr	r2, [pc, #116]	; (80002d0 <getInputKey+0xf4>)
 800025a:	2101      	movs	r1, #1
 800025c:	54d1      	strb	r1, [r2, r3]
					timeForKeyPress[i] = TIME_INTO_LONG_PRESS;
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	4a1c      	ldr	r2, [pc, #112]	; (80002d4 <getInputKey+0xf8>)
 8000262:	21c8      	movs	r1, #200	; 0xc8
 8000264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000268:	e01b      	b.n	80002a2 <getInputKey+0xc6>
				}
			}
			else{
				if(KeyReg2[i] == PRESSED_STATE){
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <getInputKey+0xec>)
 800026e:	5cd3      	ldrb	r3, [r2, r3]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d116      	bne.n	80002a2 <getInputKey+0xc6>
					timeForKeyPress[i]--;
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a17      	ldr	r2, [pc, #92]	; (80002d4 <getInputKey+0xf8>)
 8000278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027c:	3a01      	subs	r2, #1
 800027e:	4915      	ldr	r1, [pc, #84]	; (80002d4 <getInputKey+0xf8>)
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(timeForKeyPress[i] <= 0){
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	4a13      	ldr	r2, [pc, #76]	; (80002d4 <getInputKey+0xf8>)
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d108      	bne.n	80002a2 <getInputKey+0xc6>
						//todo
						PressedFlag[i] = 1;
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <getInputKey+0xf4>)
 8000294:	2101      	movs	r1, #1
 8000296:	54d1      	strb	r1, [r2, r3]
						timeForKeyPress[i] = CYCLE_LONG_PRESS;
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	4a0e      	ldr	r2, [pc, #56]	; (80002d4 <getInputKey+0xf8>)
 800029c:	2132      	movs	r1, #50	; 0x32
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t i = 0; i < no_of_used_button; i++){
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	3301      	adds	r3, #1
 80002a6:	71fb      	strb	r3, [r7, #7]
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	dcaf      	bgt.n	8000210 <getInputKey+0x34>
				}
			}
		}
	}

}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40010800 	.word	0x40010800
 80002c0:	20000090 	.word	0x20000090
 80002c4:	2000009c 	.word	0x2000009c
 80002c8:	200000a8 	.word	0x200000a8
 80002cc:	20000084 	.word	0x20000084
 80002d0:	20000078 	.word	0x20000078
 80002d4:	200000b4 	.word	0x200000b4

080002d8 <fsm_automatic>:


uint32_t time_counter = 0;
uint32_t red_counter;

void fsm_automatic(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	if(getTimerFlag(0)){
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 fe15 	bl	8000f0c <getTimerFlag>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	f000 80e8 	beq.w	80004ba <fsm_automatic+0x1e2>
		switch(status){
 80002ea:	4b75      	ldr	r3, [pc, #468]	; (80004c0 <fsm_automatic+0x1e8>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b04      	cmp	r3, #4
 80002f0:	f200 80d5 	bhi.w	800049e <fsm_automatic+0x1c6>
 80002f4:	a201      	add	r2, pc, #4	; (adr r2, 80002fc <fsm_automatic+0x24>)
 80002f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fa:	bf00      	nop
 80002fc:	08000311 	.word	0x08000311
 8000300:	0800033d 	.word	0x0800033d
 8000304:	08000393 	.word	0x08000393
 8000308:	080003ef 	.word	0x080003ef
 800030c:	08000443 	.word	0x08000443
			case INIT:
				time_counter = green_time;
 8000310:	4b6c      	ldr	r3, [pc, #432]	; (80004c4 <fsm_automatic+0x1ec>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a6c      	ldr	r2, [pc, #432]	; (80004c8 <fsm_automatic+0x1f0>)
 8000316:	6013      	str	r3, [r2, #0]
				red_counter = red_time;
 8000318:	4b6c      	ldr	r3, [pc, #432]	; (80004cc <fsm_automatic+0x1f4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a6c      	ldr	r2, [pc, #432]	; (80004d0 <fsm_automatic+0x1f8>)
 800031e:	6013      	str	r3, [r2, #0]
				update_segment_buffer(time_counter, red_counter);
 8000320:	4b69      	ldr	r3, [pc, #420]	; (80004c8 <fsm_automatic+0x1f0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a6a      	ldr	r2, [pc, #424]	; (80004d0 <fsm_automatic+0x1f8>)
 8000326:	6812      	ldr	r2, [r2, #0]
 8000328:	4611      	mov	r1, r2
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fbae 	bl	8000a8c <update_segment_buffer>
				led_green_and_red();
 8000330:	f000 fefa 	bl	8001128 <led_green_and_red>
				status = GREEN_RED;
 8000334:	4b62      	ldr	r3, [pc, #392]	; (80004c0 <fsm_automatic+0x1e8>)
 8000336:	2201      	movs	r2, #1
 8000338:	701a      	strb	r2, [r3, #0]
				break;
 800033a:	e0b9      	b.n	80004b0 <fsm_automatic+0x1d8>
			case GREEN_RED:
				if(1){
					led_green_and_red();
 800033c:	f000 fef4 	bl	8001128 <led_green_and_red>
					update_segment_buffer(--time_counter, --red_counter);
 8000340:	4b61      	ldr	r3, [pc, #388]	; (80004c8 <fsm_automatic+0x1f0>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3b01      	subs	r3, #1
 8000346:	4a60      	ldr	r2, [pc, #384]	; (80004c8 <fsm_automatic+0x1f0>)
 8000348:	6013      	str	r3, [r2, #0]
 800034a:	4b5f      	ldr	r3, [pc, #380]	; (80004c8 <fsm_automatic+0x1f0>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b60      	ldr	r3, [pc, #384]	; (80004d0 <fsm_automatic+0x1f8>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	3b01      	subs	r3, #1
 8000354:	495e      	ldr	r1, [pc, #376]	; (80004d0 <fsm_automatic+0x1f8>)
 8000356:	600b      	str	r3, [r1, #0]
 8000358:	4b5d      	ldr	r3, [pc, #372]	; (80004d0 <fsm_automatic+0x1f8>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4619      	mov	r1, r3
 800035e:	4610      	mov	r0, r2
 8000360:	f000 fb94 	bl	8000a8c <update_segment_buffer>
				}
				if(time_counter <= 0){
 8000364:	4b58      	ldr	r3, [pc, #352]	; (80004c8 <fsm_automatic+0x1f0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	f040 809a 	bne.w	80004a2 <fsm_automatic+0x1ca>
					led_yellow_and_red();
 800036e:	f000 feeb 	bl	8001148 <led_yellow_and_red>
					time_counter = yellow_time;
 8000372:	4b58      	ldr	r3, [pc, #352]	; (80004d4 <fsm_automatic+0x1fc>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a54      	ldr	r2, [pc, #336]	; (80004c8 <fsm_automatic+0x1f0>)
 8000378:	6013      	str	r3, [r2, #0]
					update_segment_buffer(time_counter, red_counter);
 800037a:	4b53      	ldr	r3, [pc, #332]	; (80004c8 <fsm_automatic+0x1f0>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a54      	ldr	r2, [pc, #336]	; (80004d0 <fsm_automatic+0x1f8>)
 8000380:	6812      	ldr	r2, [r2, #0]
 8000382:	4611      	mov	r1, r2
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fb81 	bl	8000a8c <update_segment_buffer>
					status = YELLOW_RED;
 800038a:	4b4d      	ldr	r3, [pc, #308]	; (80004c0 <fsm_automatic+0x1e8>)
 800038c:	2202      	movs	r2, #2
 800038e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000390:	e087      	b.n	80004a2 <fsm_automatic+0x1ca>
			case YELLOW_RED:
				if(1){
					led_yellow_and_red();
 8000392:	f000 fed9 	bl	8001148 <led_yellow_and_red>
					update_segment_buffer(--time_counter, --red_counter);
 8000396:	4b4c      	ldr	r3, [pc, #304]	; (80004c8 <fsm_automatic+0x1f0>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	3b01      	subs	r3, #1
 800039c:	4a4a      	ldr	r2, [pc, #296]	; (80004c8 <fsm_automatic+0x1f0>)
 800039e:	6013      	str	r3, [r2, #0]
 80003a0:	4b49      	ldr	r3, [pc, #292]	; (80004c8 <fsm_automatic+0x1f0>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b4a      	ldr	r3, [pc, #296]	; (80004d0 <fsm_automatic+0x1f8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	3b01      	subs	r3, #1
 80003aa:	4949      	ldr	r1, [pc, #292]	; (80004d0 <fsm_automatic+0x1f8>)
 80003ac:	600b      	str	r3, [r1, #0]
 80003ae:	4b48      	ldr	r3, [pc, #288]	; (80004d0 <fsm_automatic+0x1f8>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4619      	mov	r1, r3
 80003b4:	4610      	mov	r0, r2
 80003b6:	f000 fb69 	bl	8000a8c <update_segment_buffer>
				}
				if(time_counter <= 0){
 80003ba:	4b43      	ldr	r3, [pc, #268]	; (80004c8 <fsm_automatic+0x1f0>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d171      	bne.n	80004a6 <fsm_automatic+0x1ce>
					led_red_and_green();
 80003c2:	f000 fe91 	bl	80010e8 <led_red_and_green>
					time_counter = green_time;
 80003c6:	4b3f      	ldr	r3, [pc, #252]	; (80004c4 <fsm_automatic+0x1ec>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a3f      	ldr	r2, [pc, #252]	; (80004c8 <fsm_automatic+0x1f0>)
 80003cc:	6013      	str	r3, [r2, #0]
					red_counter = red_time;
 80003ce:	4b3f      	ldr	r3, [pc, #252]	; (80004cc <fsm_automatic+0x1f4>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a3f      	ldr	r2, [pc, #252]	; (80004d0 <fsm_automatic+0x1f8>)
 80003d4:	6013      	str	r3, [r2, #0]
					update_segment_buffer(time_counter, red_counter);
 80003d6:	4b3c      	ldr	r3, [pc, #240]	; (80004c8 <fsm_automatic+0x1f0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a3d      	ldr	r2, [pc, #244]	; (80004d0 <fsm_automatic+0x1f8>)
 80003dc:	6812      	ldr	r2, [r2, #0]
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fb53 	bl	8000a8c <update_segment_buffer>
					status = RED_GREEN;
 80003e6:	4b36      	ldr	r3, [pc, #216]	; (80004c0 <fsm_automatic+0x1e8>)
 80003e8:	2203      	movs	r2, #3
 80003ea:	701a      	strb	r2, [r3, #0]
				}
				break;
 80003ec:	e05b      	b.n	80004a6 <fsm_automatic+0x1ce>
			case RED_GREEN:
				if(1){
					led_red_and_green();
 80003ee:	f000 fe7b 	bl	80010e8 <led_red_and_green>
					update_segment_buffer(--time_counter, --red_counter);
 80003f2:	4b35      	ldr	r3, [pc, #212]	; (80004c8 <fsm_automatic+0x1f0>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	3b01      	subs	r3, #1
 80003f8:	4a33      	ldr	r2, [pc, #204]	; (80004c8 <fsm_automatic+0x1f0>)
 80003fa:	6013      	str	r3, [r2, #0]
 80003fc:	4b32      	ldr	r3, [pc, #200]	; (80004c8 <fsm_automatic+0x1f0>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b33      	ldr	r3, [pc, #204]	; (80004d0 <fsm_automatic+0x1f8>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	3b01      	subs	r3, #1
 8000406:	4932      	ldr	r1, [pc, #200]	; (80004d0 <fsm_automatic+0x1f8>)
 8000408:	600b      	str	r3, [r1, #0]
 800040a:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <fsm_automatic+0x1f8>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4619      	mov	r1, r3
 8000410:	4610      	mov	r0, r2
 8000412:	f000 fb3b 	bl	8000a8c <update_segment_buffer>
				}
				if(time_counter <= 0){
 8000416:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <fsm_automatic+0x1f0>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d145      	bne.n	80004aa <fsm_automatic+0x1d2>
					led_red_and_yellow();
 800041e:	f000 fe73 	bl	8001108 <led_red_and_yellow>
					time_counter = yellow_time;
 8000422:	4b2c      	ldr	r3, [pc, #176]	; (80004d4 <fsm_automatic+0x1fc>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a28      	ldr	r2, [pc, #160]	; (80004c8 <fsm_automatic+0x1f0>)
 8000428:	6013      	str	r3, [r2, #0]
					update_segment_buffer(time_counter, red_counter);
 800042a:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <fsm_automatic+0x1f0>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a28      	ldr	r2, [pc, #160]	; (80004d0 <fsm_automatic+0x1f8>)
 8000430:	6812      	ldr	r2, [r2, #0]
 8000432:	4611      	mov	r1, r2
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fb29 	bl	8000a8c <update_segment_buffer>
					status = RED_YELLOW;
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <fsm_automatic+0x1e8>)
 800043c:	2204      	movs	r2, #4
 800043e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000440:	e033      	b.n	80004aa <fsm_automatic+0x1d2>
			case RED_YELLOW:
				if(1){
					led_red_and_yellow();
 8000442:	f000 fe61 	bl	8001108 <led_red_and_yellow>
					update_segment_buffer(--time_counter, --red_counter);
 8000446:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <fsm_automatic+0x1f0>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	3b01      	subs	r3, #1
 800044c:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <fsm_automatic+0x1f0>)
 800044e:	6013      	str	r3, [r2, #0]
 8000450:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <fsm_automatic+0x1f0>)
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <fsm_automatic+0x1f8>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	3b01      	subs	r3, #1
 800045a:	491d      	ldr	r1, [pc, #116]	; (80004d0 <fsm_automatic+0x1f8>)
 800045c:	600b      	str	r3, [r1, #0]
 800045e:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <fsm_automatic+0x1f8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4619      	mov	r1, r3
 8000464:	4610      	mov	r0, r2
 8000466:	f000 fb11 	bl	8000a8c <update_segment_buffer>
				}
				if(time_counter <= 0){
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <fsm_automatic+0x1f0>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d11d      	bne.n	80004ae <fsm_automatic+0x1d6>
					led_green_and_red();
 8000472:	f000 fe59 	bl	8001128 <led_green_and_red>
					time_counter = green_time;
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <fsm_automatic+0x1ec>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <fsm_automatic+0x1f0>)
 800047c:	6013      	str	r3, [r2, #0]
					red_counter = red_time;
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <fsm_automatic+0x1f4>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <fsm_automatic+0x1f8>)
 8000484:	6013      	str	r3, [r2, #0]
					update_segment_buffer(time_counter, red_counter);
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <fsm_automatic+0x1f0>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <fsm_automatic+0x1f8>)
 800048c:	6812      	ldr	r2, [r2, #0]
 800048e:	4611      	mov	r1, r2
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fafb 	bl	8000a8c <update_segment_buffer>
					status = GREEN_RED;
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <fsm_automatic+0x1e8>)
 8000498:	2201      	movs	r2, #1
 800049a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800049c:	e007      	b.n	80004ae <fsm_automatic+0x1d6>
			default:
				break;
 800049e:	bf00      	nop
 80004a0:	e006      	b.n	80004b0 <fsm_automatic+0x1d8>
				break;
 80004a2:	bf00      	nop
 80004a4:	e004      	b.n	80004b0 <fsm_automatic+0x1d8>
				break;
 80004a6:	bf00      	nop
 80004a8:	e002      	b.n	80004b0 <fsm_automatic+0x1d8>
				break;
 80004aa:	bf00      	nop
 80004ac:	e000      	b.n	80004b0 <fsm_automatic+0x1d8>
				break;
 80004ae:	bf00      	nop
		}
		setTimer(0,1000);
 80004b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004b4:	2000      	movs	r0, #0
 80004b6:	f000 fce1 	bl	8000e7c <setTimer>
	}

}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	2000003c 	.word	0x2000003c
 80004c4:	20000000 	.word	0x20000000
 80004c8:	20000038 	.word	0x20000038
 80004cc:	20000008 	.word	0x20000008
 80004d0:	200000dc 	.word	0x200000dc
 80004d4:	20000004 	.word	0x20000004

080004d8 <fsm_manual>:

#include "fsm_manual.h"

#define CYCLE_TIME 200

void fsm_manual(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	switch(status){
 80004dc:	4b75      	ldr	r3, [pc, #468]	; (80006b4 <fsm_manual+0x1dc>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	3b15      	subs	r3, #21
 80004e2:	2b03      	cmp	r3, #3
 80004e4:	f200 80e3 	bhi.w	80006ae <fsm_manual+0x1d6>
 80004e8:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <fsm_manual+0x18>)
 80004ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ee:	bf00      	nop
 80004f0:	08000501 	.word	0x08000501
 80004f4:	08000521 	.word	0x08000521
 80004f8:	080005af 	.word	0x080005af
 80004fc:	0800063d 	.word	0x0800063d
		case MAN_GREEN_RED:
			setTimer(1, CYCLE_TIME);
 8000500:	21c8      	movs	r1, #200	; 0xc8
 8000502:	2001      	movs	r0, #1
 8000504:	f000 fcba 	bl	8000e7c <setTimer>
			Blinkred();
 8000508:	f000 fe2e 	bl	8001168 <Blinkred>
			status = MAN_MODE_2;
 800050c:	4b69      	ldr	r3, [pc, #420]	; (80006b4 <fsm_manual+0x1dc>)
 800050e:	2216      	movs	r2, #22
 8000510:	701a      	strb	r2, [r3, #0]
			update_segment_buffer(red_time, MAN_MODE_2-20);
 8000512:	4b69      	ldr	r3, [pc, #420]	; (80006b8 <fsm_manual+0x1e0>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2102      	movs	r1, #2
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fab7 	bl	8000a8c <update_segment_buffer>
			break;
 800051e:	e0c7      	b.n	80006b0 <fsm_manual+0x1d8>
		case MAN_MODE_2:
			// blink led
			if(getTimerFlag(1)){
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fcf3 	bl	8000f0c <getTimerFlag>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d005      	beq.n	8000538 <fsm_manual+0x60>
				Blinkred();
 800052c:	f000 fe1c 	bl	8001168 <Blinkred>
				setTimer(1, CYCLE_TIME);
 8000530:	21c8      	movs	r1, #200	; 0xc8
 8000532:	2001      	movs	r0, #1
 8000534:	f000 fca2 	bl	8000e7c <setTimer>
			}

			// if button1 or button2 is pressed -> refresh timeout
			if(get_pressed_flag(0) || get_pressed_flag(1)){ // button 1 is pressed
 8000538:	2000      	movs	r0, #0
 800053a:	f7ff fe2f 	bl	800019c <get_pressed_flag>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d105      	bne.n	8000550 <fsm_manual+0x78>
 8000544:	2001      	movs	r0, #1
 8000546:	f7ff fe29 	bl	800019c <get_pressed_flag>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d004      	beq.n	800055a <fsm_manual+0x82>
				setTimer(2, FSM_MANUAL_TIMEOUT); // reset timeout for man_fsm
 8000550:	f241 3188 	movw	r1, #5000	; 0x1388
 8000554:	2002      	movs	r0, #2
 8000556:	f000 fc91 	bl	8000e7c <setTimer>
			}

			//handle:
					//button 1: change mode
			if(get_pressed_flag(0)){
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff fe1e 	bl	800019c <get_pressed_flag>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d007      	beq.n	8000576 <fsm_manual+0x9e>
				status = MAN_MODE_3;
 8000566:	4b53      	ldr	r3, [pc, #332]	; (80006b4 <fsm_manual+0x1dc>)
 8000568:	2217      	movs	r2, #23
 800056a:	701a      	strb	r2, [r3, #0]
				Blinkyellow();
 800056c:	f000 fe24 	bl	80011b8 <Blinkyellow>
				set_pressed_flag(0);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff fe23 	bl	80001bc <set_pressed_flag>
			}
					//button 2: increase value LED RED
			if(get_pressed_flag(1)){
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff fe10 	bl	800019c <get_pressed_flag>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d00e      	beq.n	80005a0 <fsm_manual+0xc8>
//				red_time = (red_time >= 1 && red_time <= 99) ? red_time++ : 1;
				red_time++;
 8000582:	4b4d      	ldr	r3, [pc, #308]	; (80006b8 <fsm_manual+0x1e0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	4a4b      	ldr	r2, [pc, #300]	; (80006b8 <fsm_manual+0x1e0>)
 800058a:	6013      	str	r3, [r2, #0]
				if(red_time >= 100)
 800058c:	4b4a      	ldr	r3, [pc, #296]	; (80006b8 <fsm_manual+0x1e0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b63      	cmp	r3, #99	; 0x63
 8000592:	d902      	bls.n	800059a <fsm_manual+0xc2>
					red_time = 1;
 8000594:	4b48      	ldr	r3, [pc, #288]	; (80006b8 <fsm_manual+0x1e0>)
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
				set_pressed_flag(1);
 800059a:	2001      	movs	r0, #1
 800059c:	f7ff fe0e 	bl	80001bc <set_pressed_flag>
			}
			//change segment buffer
			update_segment_buffer(red_time, MAN_MODE_2-20);
 80005a0:	4b45      	ldr	r3, [pc, #276]	; (80006b8 <fsm_manual+0x1e0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2102      	movs	r1, #2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fa70 	bl	8000a8c <update_segment_buffer>
			break;
 80005ac:	e080      	b.n	80006b0 <fsm_manual+0x1d8>
		case MAN_MODE_3:
			//blink led
			if(getTimerFlag(1)){
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 fcac 	bl	8000f0c <getTimerFlag>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d005      	beq.n	80005c6 <fsm_manual+0xee>
				Blinkyellow();
 80005ba:	f000 fdfd 	bl	80011b8 <Blinkyellow>
				setTimer(1, CYCLE_TIME);
 80005be:	21c8      	movs	r1, #200	; 0xc8
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 fc5b 	bl	8000e7c <setTimer>
			}
			// if button1 or button2 is pressed -> refresh timeout
			if(get_pressed_flag(0) || get_pressed_flag(1)){ // button 1 is pressed
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff fde8 	bl	800019c <get_pressed_flag>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d105      	bne.n	80005de <fsm_manual+0x106>
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff fde2 	bl	800019c <get_pressed_flag>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d004      	beq.n	80005e8 <fsm_manual+0x110>
				setTimer(2, FSM_MANUAL_TIMEOUT); // reset timeout for man_fsm
 80005de:	f241 3188 	movw	r1, #5000	; 0x1388
 80005e2:	2002      	movs	r0, #2
 80005e4:	f000 fc4a 	bl	8000e7c <setTimer>
			}

			//handle:
					//button 1: change mode
			if(get_pressed_flag(0)){
 80005e8:	2000      	movs	r0, #0
 80005ea:	f7ff fdd7 	bl	800019c <get_pressed_flag>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d007      	beq.n	8000604 <fsm_manual+0x12c>
				status = MAN_MODE_4;
 80005f4:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <fsm_manual+0x1dc>)
 80005f6:	2218      	movs	r2, #24
 80005f8:	701a      	strb	r2, [r3, #0]
				Blinkgreen();
 80005fa:	f000 fe05 	bl	8001208 <Blinkgreen>
				set_pressed_flag(0);
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff fddc 	bl	80001bc <set_pressed_flag>
			}
					//button 2: increase value LED RED
			if(get_pressed_flag(1)){
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff fdc9 	bl	800019c <get_pressed_flag>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d00e      	beq.n	800062e <fsm_manual+0x156>
				yellow_time++;
 8000610:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <fsm_manual+0x1e4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a29      	ldr	r2, [pc, #164]	; (80006bc <fsm_manual+0x1e4>)
 8000618:	6013      	str	r3, [r2, #0]
				if(yellow_time >= 100)
 800061a:	4b28      	ldr	r3, [pc, #160]	; (80006bc <fsm_manual+0x1e4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b63      	cmp	r3, #99	; 0x63
 8000620:	d902      	bls.n	8000628 <fsm_manual+0x150>
					yellow_time = 1;
 8000622:	4b26      	ldr	r3, [pc, #152]	; (80006bc <fsm_manual+0x1e4>)
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]
				set_pressed_flag(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff fdc7 	bl	80001bc <set_pressed_flag>
			}
			//change segment buffer
			update_segment_buffer(yellow_time, MAN_MODE_3-20);
 800062e:	4b23      	ldr	r3, [pc, #140]	; (80006bc <fsm_manual+0x1e4>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2103      	movs	r1, #3
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fa29 	bl	8000a8c <update_segment_buffer>
			break;
 800063a:	e039      	b.n	80006b0 <fsm_manual+0x1d8>
		case MAN_MODE_4:
			//blink led
			if(getTimerFlag(1)){
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fc65 	bl	8000f0c <getTimerFlag>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d005      	beq.n	8000654 <fsm_manual+0x17c>
				Blinkgreen();
 8000648:	f000 fdde 	bl	8001208 <Blinkgreen>
				setTimer(1, CYCLE_TIME);
 800064c:	21c8      	movs	r1, #200	; 0xc8
 800064e:	2001      	movs	r0, #1
 8000650:	f000 fc14 	bl	8000e7c <setTimer>
			}
			// if button1 or button2 is pressed -> refresh timeout
			if(get_pressed_flag(0) || get_pressed_flag(1)){ // button 1 is pressed
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fda1 	bl	800019c <get_pressed_flag>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d105      	bne.n	800066c <fsm_manual+0x194>
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff fd9b 	bl	800019c <get_pressed_flag>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d004      	beq.n	8000676 <fsm_manual+0x19e>
				setTimer(2, FSM_MANUAL_TIMEOUT); // reset timeout for man_fsm
 800066c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000670:	2002      	movs	r0, #2
 8000672:	f000 fc03 	bl	8000e7c <setTimer>
			//handle:
					//button 1: change mode
							/* fsm_setting() handle this task*/

					//button 2: increase value LED RED
			if(get_pressed_flag(1)){
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff fd90 	bl	800019c <get_pressed_flag>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d00e      	beq.n	80006a0 <fsm_manual+0x1c8>
				green_time++;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <fsm_manual+0x1e8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <fsm_manual+0x1e8>)
 800068a:	6013      	str	r3, [r2, #0]
				if(green_time >= 100)
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <fsm_manual+0x1e8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b63      	cmp	r3, #99	; 0x63
 8000692:	d902      	bls.n	800069a <fsm_manual+0x1c2>
					green_time = 1;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <fsm_manual+0x1e8>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
				set_pressed_flag(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff fd8e 	bl	80001bc <set_pressed_flag>
			}
			//change segment buffer
			update_segment_buffer(green_time, MAN_MODE_4-20);
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <fsm_manual+0x1e8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2104      	movs	r1, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f9f0 	bl	8000a8c <update_segment_buffer>
			break;
 80006ac:	e000      	b.n	80006b0 <fsm_manual+0x1d8>
		default:
			break;
 80006ae:	bf00      	nop
	}


}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000003c 	.word	0x2000003c
 80006b8:	20000008 	.word	0x20000008
 80006bc:	20000004 	.word	0x20000004
 80006c0:	20000000 	.word	0x20000000

080006c4 <fsm_setting>:

#include "fsm_setting.h"



void fsm_setting(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

	switch(status){
 80006c8:	4b32      	ldr	r3, [pc, #200]	; (8000794 <fsm_setting+0xd0>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	dc02      	bgt.n	80006d6 <fsm_setting+0x12>
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	dc04      	bgt.n	80006de <fsm_setting+0x1a>
				setTimerFlag(0, 1);
				set_pressed_flag(0);
				break;
			}
		default:
			break;
 80006d4:	e059      	b.n	800078a <fsm_setting+0xc6>
 80006d6:	3b16      	subs	r3, #22
	switch(status){
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d856      	bhi.n	800078a <fsm_setting+0xc6>
 80006dc:	e015      	b.n	800070a <fsm_setting+0x46>
			if(get_pressed_flag(0)){ // button 1 is pressed
 80006de:	2000      	movs	r0, #0
 80006e0:	f7ff fd5c 	bl	800019c <get_pressed_flag>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d051      	beq.n	800078e <fsm_setting+0xca>
					setTimer(2, FSM_MANUAL_TIMEOUT); // set timeout for man_fsm
 80006ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80006ee:	2002      	movs	r0, #2
 80006f0:	f000 fbc4 	bl	8000e7c <setTimer>
					status = MAN_GREEN_RED;
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <fsm_setting+0xd0>)
 80006f6:	2215      	movs	r2, #21
 80006f8:	701a      	strb	r2, [r3, #0]
					set_pressed_flag(0);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff fd5e 	bl	80001bc <set_pressed_flag>
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000700:	2120      	movs	r1, #32
 8000702:	4825      	ldr	r0, [pc, #148]	; (8000798 <fsm_setting+0xd4>)
 8000704:	f001 f8e7 	bl	80018d6 <HAL_GPIO_TogglePin>
			break;
 8000708:	e041      	b.n	800078e <fsm_setting+0xca>
			if(get_pressed_flag(2) || getTimerFlag(2)){
 800070a:	2002      	movs	r0, #2
 800070c:	f7ff fd46 	bl	800019c <get_pressed_flag>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d105      	bne.n	8000722 <fsm_setting+0x5e>
 8000716:	2002      	movs	r0, #2
 8000718:	f000 fbf8 	bl	8000f0c <getTimerFlag>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d01e      	beq.n	8000760 <fsm_setting+0x9c>
					status = INIT;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <fsm_setting+0xd0>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
					setTimerFlag(0, 1);
 8000728:	2101      	movs	r1, #1
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fbfe 	bl	8000f2c <setTimerFlag>
					if(red_time != green_time + yellow_time){
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <fsm_setting+0xd8>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <fsm_setting+0xdc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	441a      	add	r2, r3
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <fsm_setting+0xe0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	429a      	cmp	r2, r3
 8000740:	d006      	beq.n	8000750 <fsm_setting+0x8c>
						red_time = green_time + yellow_time;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <fsm_setting+0xd8>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <fsm_setting+0xdc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <fsm_setting+0xe0>)
 800074e:	6013      	str	r3, [r2, #0]
					set_pressed_flag(2);
 8000750:	2002      	movs	r0, #2
 8000752:	f7ff fd33 	bl	80001bc <set_pressed_flag>
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000756:	2120      	movs	r1, #32
 8000758:	480f      	ldr	r0, [pc, #60]	; (8000798 <fsm_setting+0xd4>)
 800075a:	f001 f8bc 	bl	80018d6 <HAL_GPIO_TogglePin>
					break;
 800075e:	e017      	b.n	8000790 <fsm_setting+0xcc>
			if(status == MAN_MODE_4 && get_pressed_flag(0)){
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <fsm_setting+0xd0>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b18      	cmp	r3, #24
 8000766:	d110      	bne.n	800078a <fsm_setting+0xc6>
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff fd17 	bl	800019c <get_pressed_flag>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00a      	beq.n	800078a <fsm_setting+0xc6>
				status = INIT;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <fsm_setting+0xd0>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
				setTimerFlag(0, 1);
 800077a:	2101      	movs	r1, #1
 800077c:	2000      	movs	r0, #0
 800077e:	f000 fbd5 	bl	8000f2c <setTimerFlag>
				set_pressed_flag(0);
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff fd1a 	bl	80001bc <set_pressed_flag>
				break;
 8000788:	e002      	b.n	8000790 <fsm_setting+0xcc>
			break;
 800078a:	bf00      	nop
 800078c:	e000      	b.n	8000790 <fsm_setting+0xcc>
			break;
 800078e:	bf00      	nop
	}

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000003c 	.word	0x2000003c
 8000798:	40010800 	.word	0x40010800
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000004 	.word	0x20000004
 80007a4:	20000008 	.word	0x20000008

080007a8 <init_display>:
					GPIO_TypeDef *B_GPIOx, uint16_t B_Pin,
					GPIO_TypeDef *C_GPIOx, uint16_t C_Pin,
					GPIO_TypeDef *D_GPIOx, uint16_t D_Pin,
					GPIO_TypeDef *E_GPIOx, uint16_t E_Pin,
					GPIO_TypeDef *F_GPIOx, uint16_t F_Pin,
					GPIO_TypeDef *G_GPIOx, uint16_t G_Pin){
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	461a      	mov	r2, r3
 80007b4:	460b      	mov	r3, r1
 80007b6:	817b      	strh	r3, [r7, #10]
 80007b8:	4613      	mov	r3, r2
 80007ba:	813b      	strh	r3, [r7, #8]
	LED_segment.A_seg.SEG_GPIOx = A_GPIOx;
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <init_display+0x74>)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	6013      	str	r3, [r2, #0]
	LED_segment.A_seg.SEG_Pin = A_Pin;
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <init_display+0x74>)
 80007c4:	897b      	ldrh	r3, [r7, #10]
 80007c6:	8093      	strh	r3, [r2, #4]

	LED_segment.B_seg.SEG_GPIOx = B_GPIOx;
 80007c8:	4a14      	ldr	r2, [pc, #80]	; (800081c <init_display+0x74>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6093      	str	r3, [r2, #8]
	LED_segment.B_seg.SEG_Pin = B_Pin;
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <init_display+0x74>)
 80007d0:	893b      	ldrh	r3, [r7, #8]
 80007d2:	8193      	strh	r3, [r2, #12]

	LED_segment.C_seg.SEG_GPIOx = C_GPIOx;
 80007d4:	4a11      	ldr	r2, [pc, #68]	; (800081c <init_display+0x74>)
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	6113      	str	r3, [r2, #16]
	LED_segment.C_seg.SEG_Pin = C_Pin;
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <init_display+0x74>)
 80007dc:	8bbb      	ldrh	r3, [r7, #28]
 80007de:	8293      	strh	r3, [r2, #20]

	LED_segment.D_seg.SEG_GPIOx = D_GPIOx;
 80007e0:	4a0e      	ldr	r2, [pc, #56]	; (800081c <init_display+0x74>)
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	6193      	str	r3, [r2, #24]
	LED_segment.D_seg.SEG_Pin = D_Pin;
 80007e6:	4a0d      	ldr	r2, [pc, #52]	; (800081c <init_display+0x74>)
 80007e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007ea:	8393      	strh	r3, [r2, #28]

	LED_segment.E_seg.SEG_GPIOx = E_GPIOx;
 80007ec:	4a0b      	ldr	r2, [pc, #44]	; (800081c <init_display+0x74>)
 80007ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f0:	6213      	str	r3, [r2, #32]
	LED_segment.E_seg.SEG_Pin = E_Pin;
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <init_display+0x74>)
 80007f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80007f6:	8493      	strh	r3, [r2, #36]	; 0x24

	LED_segment.F_seg.SEG_GPIOx = F_GPIOx;
 80007f8:	4a08      	ldr	r2, [pc, #32]	; (800081c <init_display+0x74>)
 80007fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007fc:	6293      	str	r3, [r2, #40]	; 0x28
	LED_segment.F_seg.SEG_Pin = F_Pin;
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <init_display+0x74>)
 8000800:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000802:	8593      	strh	r3, [r2, #44]	; 0x2c

	LED_segment.G_seg.SEG_GPIOx = G_GPIOx;
 8000804:	4a05      	ldr	r2, [pc, #20]	; (800081c <init_display+0x74>)
 8000806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
	LED_segment.G_seg.SEG_Pin = G_Pin;
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <init_display+0x74>)
 800080c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800080e:	8693      	strh	r3, [r2, #52]	; 0x34
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	200000e0 	.word	0x200000e0

08000820 <display7SEG>:

void display7SEG(uint8_t A_LED, uint8_t B_LED, uint8_t C_LED, uint8_t D_LED,
				 uint8_t E_LED, uint8_t F_LED, uint8_t G_LED){
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4604      	mov	r4, r0
 8000828:	4608      	mov	r0, r1
 800082a:	4611      	mov	r1, r2
 800082c:	461a      	mov	r2, r3
 800082e:	4623      	mov	r3, r4
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	4603      	mov	r3, r0
 8000834:	71bb      	strb	r3, [r7, #6]
 8000836:	460b      	mov	r3, r1
 8000838:	717b      	strb	r3, [r7, #5]
 800083a:	4613      	mov	r3, r2
 800083c:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(LED_segment.A_seg.SEG_GPIOx, LED_segment.A_seg.SEG_Pin, A_LED);
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <display7SEG+0x98>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <display7SEG+0x98>)
 8000844:	8891      	ldrh	r1, [r2, #4]
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	4618      	mov	r0, r3
 800084a:	f001 f82c 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.B_seg.SEG_GPIOx, LED_segment.B_seg.SEG_Pin, B_LED);
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <display7SEG+0x98>)
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <display7SEG+0x98>)
 8000854:	8991      	ldrh	r1, [r2, #12]
 8000856:	79ba      	ldrb	r2, [r7, #6]
 8000858:	4618      	mov	r0, r3
 800085a:	f001 f824 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.C_seg.SEG_GPIOx, LED_segment.C_seg.SEG_Pin, C_LED);
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <display7SEG+0x98>)
 8000860:	691b      	ldr	r3, [r3, #16]
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <display7SEG+0x98>)
 8000864:	8a91      	ldrh	r1, [r2, #20]
 8000866:	797a      	ldrb	r2, [r7, #5]
 8000868:	4618      	mov	r0, r3
 800086a:	f001 f81c 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.D_seg.SEG_GPIOx, LED_segment.D_seg.SEG_Pin, D_LED);
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <display7SEG+0x98>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <display7SEG+0x98>)
 8000874:	8b91      	ldrh	r1, [r2, #28]
 8000876:	793a      	ldrb	r2, [r7, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	f001 f814 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.E_seg.SEG_GPIOx, LED_segment.E_seg.SEG_Pin, E_LED);
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <display7SEG+0x98>)
 8000880:	6a1b      	ldr	r3, [r3, #32]
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <display7SEG+0x98>)
 8000884:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000886:	7e3a      	ldrb	r2, [r7, #24]
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f80c 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.F_seg.SEG_GPIOx, LED_segment.F_seg.SEG_Pin, F_LED);
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <display7SEG+0x98>)
 8000890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000892:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <display7SEG+0x98>)
 8000894:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8000896:	7f3a      	ldrb	r2, [r7, #28]
 8000898:	4618      	mov	r0, r3
 800089a:	f001 f804 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.G_seg.SEG_GPIOx, LED_segment.G_seg.SEG_Pin, G_LED);
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <display7SEG+0x98>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <display7SEG+0x98>)
 80008a4:	8e91      	ldrh	r1, [r2, #52]	; 0x34
 80008a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fffb 	bl	80018a6 <HAL_GPIO_WritePin>
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	200000e0 	.word	0x200000e0

080008bc <clear_all_LED>:
void clear_all_LED(){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af04      	add	r7, sp, #16
	display7SEG(SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF);
 80008c2:	2301      	movs	r3, #1
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	2301      	movs	r3, #1
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff ffa3 	bl	8000820 <display7SEG>
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <execute_7SEG_LED>:
void execute_7SEG_LED(SEG_state state){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af04      	add	r7, sp, #16
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	switch(state)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b09      	cmp	r3, #9
 80008ee:	f200 8099 	bhi.w	8000a24 <execute_7SEG_LED+0x144>
 80008f2:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <execute_7SEG_LED+0x18>)
 80008f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f8:	08000921 	.word	0x08000921
 80008fc:	0800093b 	.word	0x0800093b
 8000900:	08000955 	.word	0x08000955
 8000904:	0800096f 	.word	0x0800096f
 8000908:	08000989 	.word	0x08000989
 800090c:	080009a3 	.word	0x080009a3
 8000910:	080009bd 	.word	0x080009bd
 8000914:	080009d7 	.word	0x080009d7
 8000918:	080009f1 	.word	0x080009f1
 800091c:	08000a0b 	.word	0x08000a0b
	{
		case ZERO:
			display7SEG(SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_OFF);
 8000920:	2301      	movs	r3, #1
 8000922:	9302      	str	r3, [sp, #8]
 8000924:	2300      	movs	r3, #0
 8000926:	9301      	str	r3, [sp, #4]
 8000928:	2300      	movs	r3, #0
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2300      	movs	r3, #0
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ff74 	bl	8000820 <display7SEG>
			break;
 8000938:	e074      	b.n	8000a24 <execute_7SEG_LED+0x144>
		case ONE:
			display7SEG(SEG_OFF, SEG_ON, SEG_ON, SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF);
 800093a:	2301      	movs	r3, #1
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	2301      	movs	r3, #1
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	2301      	movs	r3, #1
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2301      	movs	r3, #1
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff ff67 	bl	8000820 <display7SEG>
			break;
 8000952:	e067      	b.n	8000a24 <execute_7SEG_LED+0x144>
		case TWO:
			display7SEG(SEG_ON, SEG_ON, SEG_OFF, SEG_ON, SEG_ON, SEG_OFF, SEG_ON);
 8000954:	2300      	movs	r3, #0
 8000956:	9302      	str	r3, [sp, #8]
 8000958:	2301      	movs	r3, #1
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	2300      	movs	r3, #0
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2300      	movs	r3, #0
 8000962:	2201      	movs	r2, #1
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff ff5a 	bl	8000820 <display7SEG>
			break;
 800096c:	e05a      	b.n	8000a24 <execute_7SEG_LED+0x144>
		case THREE:
			display7SEG(SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_OFF, SEG_OFF, SEG_ON);
 800096e:	2300      	movs	r3, #0
 8000970:	9302      	str	r3, [sp, #8]
 8000972:	2301      	movs	r3, #1
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	2301      	movs	r3, #1
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2300      	movs	r3, #0
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff ff4d 	bl	8000820 <display7SEG>
			break;
 8000986:	e04d      	b.n	8000a24 <execute_7SEG_LED+0x144>
		case FOUR:
			display7SEG(SEG_OFF, SEG_ON, SEG_ON, SEG_OFF, SEG_OFF, SEG_ON, SEG_ON);
 8000988:	2300      	movs	r3, #0
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	2300      	movs	r3, #0
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	2301      	movs	r3, #1
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2301      	movs	r3, #1
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff ff40 	bl	8000820 <display7SEG>
			break;
 80009a0:	e040      	b.n	8000a24 <execute_7SEG_LED+0x144>
		case FIVE:
			display7SEG(SEG_ON, SEG_OFF, SEG_ON, SEG_ON, SEG_OFF, SEG_ON, SEG_ON);
 80009a2:	2300      	movs	r3, #0
 80009a4:	9302      	str	r3, [sp, #8]
 80009a6:	2300      	movs	r3, #0
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	2301      	movs	r3, #1
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	2200      	movs	r2, #0
 80009b2:	2101      	movs	r1, #1
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff ff33 	bl	8000820 <display7SEG>
			break;
 80009ba:	e033      	b.n	8000a24 <execute_7SEG_LED+0x144>
		case SIX:
			display7SEG(SEG_ON, SEG_OFF, SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON);
 80009bc:	2300      	movs	r3, #0
 80009be:	9302      	str	r3, [sp, #8]
 80009c0:	2300      	movs	r3, #0
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	2300      	movs	r3, #0
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2300      	movs	r3, #0
 80009ca:	2200      	movs	r2, #0
 80009cc:	2101      	movs	r1, #1
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff ff26 	bl	8000820 <display7SEG>
			break;
 80009d4:	e026      	b.n	8000a24 <execute_7SEG_LED+0x144>
		case SEVEN:
			display7SEG(SEG_ON, SEG_ON, SEG_ON, SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF);
 80009d6:	2301      	movs	r3, #1
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2301      	movs	r3, #1
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	2301      	movs	r3, #1
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2301      	movs	r3, #1
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff ff19 	bl	8000820 <display7SEG>
			break;
 80009ee:	e019      	b.n	8000a24 <execute_7SEG_LED+0x144>
		case EIGHT:
			display7SEG(SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON);
 80009f0:	2300      	movs	r3, #0
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2300      	movs	r3, #0
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	2300      	movs	r3, #0
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2300      	movs	r3, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff ff0c 	bl	8000820 <display7SEG>
			break;
 8000a08:	e00c      	b.n	8000a24 <execute_7SEG_LED+0x144>
		case NINE:
			display7SEG(SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_OFF, SEG_ON, SEG_ON);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	2301      	movs	r3, #1
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2300      	movs	r3, #0
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff feff 	bl	8000820 <display7SEG>
			break;
 8000a22:	bf00      	nop
//		default:
//			break;
	}
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <enableSEG>:


static uint8_t state = 0;
uint8_t led_buffer[4] = {0, 0, 0, 0};

void enableSEG(uint8_t EN0, uint8_t EN1, uint8_t EN2, uint8_t EN3){
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4604      	mov	r4, r0
 8000a34:	4608      	mov	r0, r1
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4623      	mov	r3, r4
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71bb      	strb	r3, [r7, #6]
 8000a42:	460b      	mov	r3, r1
 8000a44:	717b      	strb	r3, [r7, #5]
 8000a46:	4613      	mov	r3, r2
 8000a48:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, EN0);
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <enableSEG+0x5c>)
 8000a52:	f000 ff28 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, EN1);
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	480a      	ldr	r0, [pc, #40]	; (8000a88 <enableSEG+0x5c>)
 8000a5e:	f000 ff22 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, EN2);
 8000a62:	797b      	ldrb	r3, [r7, #5]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <enableSEG+0x5c>)
 8000a6c:	f000 ff1b 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, EN3);
 8000a70:	793b      	ldrb	r3, [r7, #4]
 8000a72:	461a      	mov	r2, r3
 8000a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <enableSEG+0x5c>)
 8000a7a:	f000 ff14 	bl	80018a6 <HAL_GPIO_WritePin>
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40010800 	.word	0x40010800

08000a8c <update_segment_buffer>:
void update_segment_buffer(uint32_t traffic1_time, uint32_t traffic2_time){
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	led_buffer[0] = traffic1_time /10;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <update_segment_buffer+0x68>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <update_segment_buffer+0x6c>)
 8000aa4:	701a      	strb	r2, [r3, #0]
	led_buffer[1] = traffic1_time %10;
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <update_segment_buffer+0x68>)
 8000aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8000aae:	08da      	lsrs	r2, r3, #3
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	1aca      	subs	r2, r1, r3
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <update_segment_buffer+0x6c>)
 8000abe:	705a      	strb	r2, [r3, #1]

	led_buffer[2] = traffic2_time /10;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <update_segment_buffer+0x68>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <update_segment_buffer+0x6c>)
 8000ace:	709a      	strb	r2, [r3, #2]
	led_buffer[3] = traffic2_time %10;
 8000ad0:	6839      	ldr	r1, [r7, #0]
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <update_segment_buffer+0x68>)
 8000ad4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ad8:	08da      	lsrs	r2, r3, #3
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	1aca      	subs	r2, r1, r3
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <update_segment_buffer+0x6c>)
 8000ae8:	70da      	strb	r2, [r3, #3]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	cccccccd 	.word	0xcccccccd
 8000af8:	20000040 	.word	0x20000040

08000afc <scan7SEG>:
void scan7SEG(){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	switch(state){
 8000b00:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <scan7SEG+0xb0>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d84f      	bhi.n	8000ba8 <scan7SEG+0xac>
 8000b08:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <scan7SEG+0x14>)
 8000b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0e:	bf00      	nop
 8000b10:	08000b21 	.word	0x08000b21
 8000b14:	08000b43 	.word	0x08000b43
 8000b18:	08000b65 	.word	0x08000b65
 8000b1c:	08000b87 	.word	0x08000b87
		case 0:
			clear_all_LED();
 8000b20:	f7ff fecc 	bl	80008bc <clear_all_LED>
			enableSEG(EN, DIS, DIS, DIS);
 8000b24:	2301      	movs	r3, #1
 8000b26:	2201      	movs	r2, #1
 8000b28:	2101      	movs	r1, #1
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff ff7e 	bl	8000a2c <enableSEG>
			execute_7SEG_LED(led_buffer[0]);
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <scan7SEG+0xb4>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fed3 	bl	80008e0 <execute_7SEG_LED>
			state = 1;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <scan7SEG+0xb0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
			break;
 8000b40:	e032      	b.n	8000ba8 <scan7SEG+0xac>
		case 1:
			clear_all_LED();
 8000b42:	f7ff febb 	bl	80008bc <clear_all_LED>
			enableSEG(DIS, EN, DIS, DIS);
 8000b46:	2301      	movs	r3, #1
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff ff6d 	bl	8000a2c <enableSEG>
			execute_7SEG_LED(led_buffer[1]);
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <scan7SEG+0xb4>)
 8000b54:	785b      	ldrb	r3, [r3, #1]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fec2 	bl	80008e0 <execute_7SEG_LED>
			state = 2;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <scan7SEG+0xb0>)
 8000b5e:	2202      	movs	r2, #2
 8000b60:	701a      	strb	r2, [r3, #0]
			break;
 8000b62:	e021      	b.n	8000ba8 <scan7SEG+0xac>
		case 2:
			clear_all_LED();
 8000b64:	f7ff feaa 	bl	80008bc <clear_all_LED>
			enableSEG(DIS, DIS, EN, DIS);
 8000b68:	2301      	movs	r3, #1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff ff5c 	bl	8000a2c <enableSEG>
			execute_7SEG_LED(led_buffer[2]);
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <scan7SEG+0xb4>)
 8000b76:	789b      	ldrb	r3, [r3, #2]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff feb1 	bl	80008e0 <execute_7SEG_LED>
			state = 3;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <scan7SEG+0xb0>)
 8000b80:	2203      	movs	r2, #3
 8000b82:	701a      	strb	r2, [r3, #0]
			break;
 8000b84:	e010      	b.n	8000ba8 <scan7SEG+0xac>
		case 3:
			clear_all_LED();
 8000b86:	f7ff fe99 	bl	80008bc <clear_all_LED>
			enableSEG(DIS, DIS, DIS, EN);
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff ff4b 	bl	8000a2c <enableSEG>
			execute_7SEG_LED(led_buffer[3]);
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <scan7SEG+0xb4>)
 8000b98:	78db      	ldrb	r3, [r3, #3]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fea0 	bl	80008e0 <execute_7SEG_LED>
			state = 0;
 8000ba0:	4b02      	ldr	r3, [pc, #8]	; (8000bac <scan7SEG+0xb0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
			break;
 8000ba6:	bf00      	nop

	}
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000003d 	.word	0x2000003d
 8000bb0:	20000040 	.word	0x20000040

08000bb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d103      	bne.n	8000bd0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		timeRun();
 8000bc8:	f000 f976 	bl	8000eb8 <timeRun>
		getInputKey();
 8000bcc:	f7ff fb06 	bl	80001dc <getInputKey>
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	2000011c 	.word	0x2000011c

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be2:	f000 fb5f 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be6:	f000 f857 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bea:	f000 f8dd 	bl	8000da8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bee:	f000 f88f 	bl	8000d10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bf2:	4826      	ldr	r0, [pc, #152]	; (8000c8c <main+0xb0>)
 8000bf4:	f001 fab4 	bl	8002160 <HAL_TIM_Base_Start_IT>
  init_display(SEG0_GPIO_Port, SEG0_Pin,
 8000bf8:	2340      	movs	r3, #64	; 0x40
 8000bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <main+0xb4>)
 8000bfe:	9308      	str	r3, [sp, #32]
 8000c00:	2320      	movs	r3, #32
 8000c02:	9307      	str	r3, [sp, #28]
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <main+0xb4>)
 8000c06:	9306      	str	r3, [sp, #24]
 8000c08:	2310      	movs	r3, #16
 8000c0a:	9305      	str	r3, [sp, #20]
 8000c0c:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <main+0xb4>)
 8000c0e:	9304      	str	r3, [sp, #16]
 8000c10:	2308      	movs	r3, #8
 8000c12:	9303      	str	r3, [sp, #12]
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <main+0xb4>)
 8000c16:	9302      	str	r3, [sp, #8]
 8000c18:	2304      	movs	r3, #4
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <main+0xb4>)
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2302      	movs	r3, #2
 8000c22:	4a1b      	ldr	r2, [pc, #108]	; (8000c90 <main+0xb4>)
 8000c24:	2101      	movs	r1, #1
 8000c26:	481a      	ldr	r0, [pc, #104]	; (8000c90 <main+0xb4>)
 8000c28:	f7ff fdbe 	bl	80007a8 <init_display>
 			   SEG2_GPIO_Port, SEG2_Pin,
 			   SEG3_GPIO_Port, SEG3_Pin,
 			   SEG4_GPIO_Port, SEG4_Pin,
 			   SEG5_GPIO_Port, SEG5_Pin,
 			   SEG6_GPIO_Port, SEG6_Pin);
  setTimer(0,100);
 8000c2c:	2164      	movs	r1, #100	; 0x64
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f924 	bl	8000e7c <setTimer>
  setTimer(3, 1000);
 8000c34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f91f 	bl	8000e7c <setTimer>
  setTimer(4, 100);
 8000c3e:	2164      	movs	r1, #100	; 0x64
 8000c40:	2004      	movs	r0, #4
 8000c42:	f000 f91b 	bl	8000e7c <setTimer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getTimerFlag(3) == 1){
 8000c46:	2003      	movs	r0, #3
 8000c48:	f000 f960 	bl	8000f0c <getTimerFlag>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d108      	bne.n	8000c64 <main+0x88>
	  		setTimer(3, 1000);
 8000c52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 f910 	bl	8000e7c <setTimer>
	  		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <main+0xb8>)
 8000c60:	f000 fe39 	bl	80018d6 <HAL_GPIO_TogglePin>
	  }
	  if(getTimerFlag(4) == 1){
 8000c64:	2004      	movs	r0, #4
 8000c66:	f000 f951 	bl	8000f0c <getTimerFlag>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d105      	bne.n	8000c7c <main+0xa0>
	  	  setTimer(4, 80);
 8000c70:	2150      	movs	r1, #80	; 0x50
 8000c72:	2004      	movs	r0, #4
 8000c74:	f000 f902 	bl	8000e7c <setTimer>
	  	  scan7SEG();
 8000c78:	f7ff ff40 	bl	8000afc <scan7SEG>
	  }


	  fsm_automatic();
 8000c7c:	f7ff fb2c 	bl	80002d8 <fsm_automatic>
	  fsm_manual();
 8000c80:	f7ff fc2a 	bl	80004d8 <fsm_manual>
	  fsm_setting();
 8000c84:	f7ff fd1e 	bl	80006c4 <fsm_setting>
	  if(getTimerFlag(3) == 1){
 8000c88:	e7dd      	b.n	8000c46 <main+0x6a>
 8000c8a:	bf00      	nop
 8000c8c:	2000011c 	.word	0x2000011c
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40010800 	.word	0x40010800

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b090      	sub	sp, #64	; 0x40
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	2228      	movs	r2, #40	; 0x28
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fe0a 	bl	80028c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fe1a 	bl	8001908 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cda:	f000 f8c9 	bl	8000e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 f886 	bl	8001e08 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d02:	f000 f8b5 	bl	8000e70 <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3740      	adds	r7, #64	; 0x40
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d44:	2209      	movs	r2, #9
 8000d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d54:	4813      	ldr	r0, [pc, #76]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d56:	f001 f9b3 	bl	80020c0 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d60:	f000 f886 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d72:	f001 fb31 	bl	80023d8 <HAL_TIM_ConfigClockSource>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 f878 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d8e:	f001 fd09 	bl	80027a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d98:	f000 f86a 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	2000011c 	.word	0x2000011c

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <MX_GPIO_Init+0xbc>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <MX_GPIO_Init+0xbc>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <MX_GPIO_Init+0xbc>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <MX_GPIO_Init+0xbc>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MX_GPIO_Init+0xbc>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <MX_GPIO_Init+0xbc>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLINK_LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000df2:	481d      	ldr	r0, [pc, #116]	; (8000e68 <MX_GPIO_Init+0xc0>)
 8000df4:	f000 fd57 	bl	80018a6 <HAL_GPIO_WritePin>
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|LED_GREEN_LR_Pin
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000dfe:	481b      	ldr	r0, [pc, #108]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000e00:	f000 fd51 	bl	80018a6 <HAL_GPIO_WritePin>
                          |SEG5_Pin|SEG6_Pin|LED_GREEN_AL_Pin|LED_YELLOW_AL_Pin
                          |LED_RED_AL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BLINK_LED_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = BLINK_LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000e04:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000e08:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2302      	movs	r3, #2
 8000e14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4812      	ldr	r0, [pc, #72]	; (8000e68 <MX_GPIO_Init+0xc0>)
 8000e1e:	f000 fbb1 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin LED_GREEN_LR_Pin
                           LED_YELLOW_LR_Pin LED_RED_LR_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin LED_GREEN_AL_Pin LED_YELLOW_AL_Pin
                           LED_RED_AL_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|LED_GREEN_LR_Pin
 8000e22:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e26:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_LR_Pin|LED_RED_LR_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin|LED_GREEN_AL_Pin|LED_YELLOW_AL_Pin
                          |LED_RED_AL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2302      	movs	r3, #2
 8000e32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_GPIO_Init+0xc4>)
 8000e3c:	f000 fba2 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8000e40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	4619      	mov	r1, r3
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_GPIO_Init+0xc0>)
 8000e56:	f000 fb95 	bl	8001584 <HAL_GPIO_Init>

}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010800 	.word	0x40010800
 8000e6c:	40010c00 	.word	0x40010c00

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <setTimer>:

// khoi tao cac bien cho cac sotware timer
static uint32_t timer_counter[NO_OF_TIMER];
static uint8_t timer_flag[NO_OF_TIMER];

void setTimer(uint32_t index, uint32_t counter){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	timer_counter[index] = counter/TICK;  // chia cho TICK de dam bao rang 1 second = 1000
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	4a08      	ldr	r2, [pc, #32]	; (8000eac <setTimer+0x30>)
 8000e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <setTimer+0x34>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <setTimer+0x38>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	cccccccd 	.word	0xcccccccd
 8000eb0:	20000044 	.word	0x20000044
 8000eb4:	2000006c 	.word	0x2000006c

08000eb8 <timeRun>:

void timeRun(){
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < NO_OF_TIMER; i++){
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	e016      	b.n	8000ef2 <timeRun+0x3a>
		if(timer_counter[i] >= 0){
			timer_counter[i]--;
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <timeRun+0x4c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ecc:	1e5a      	subs	r2, r3, #1
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <timeRun+0x4c>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <timeRun+0x4c>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d104      	bne.n	8000eec <timeRun+0x34>
				timer_flag[i] = 1;
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <timeRun+0x50>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < NO_OF_TIMER; i++){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b09      	cmp	r3, #9
 8000ef6:	d9e5      	bls.n	8000ec4 <timeRun+0xc>
			}
		}
	}
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000044 	.word	0x20000044
 8000f08:	2000006c 	.word	0x2000006c

08000f0c <getTimerFlag>:

uint8_t getTimerFlag(uint32_t index){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	return timer_flag[index];
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <getTimerFlag+0x1c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	781b      	ldrb	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2000006c 	.word	0x2000006c

08000f2c <setTimerFlag>:
void setTimerFlag(uint32_t index, uint8_t value){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
	timer_flag[index] = value;
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <setTimerFlag+0x20>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	78fa      	ldrb	r2, [r7, #3]
 8000f40:	701a      	strb	r2, [r3, #0]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	2000006c 	.word	0x2000006c

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_MspInit+0x5c>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <HAL_MspInit+0x5c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6193      	str	r3, [r2, #24]
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_MspInit+0x5c>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_MspInit+0x5c>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_MspInit+0x5c>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	61d3      	str	r3, [r2, #28]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_MspInit+0x5c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_MspInit+0x60>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_MspInit+0x60>)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000

08000fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc4:	d113      	bne.n	8000fee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_TIM_Base_MspInit+0x44>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_TIM_Base_MspInit+0x44>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_TIM_Base_MspInit+0x44>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	201c      	movs	r0, #28
 8000fe4:	f000 fa97 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fe8:	201c      	movs	r0, #28
 8000fea:	f000 fab0 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001042:	f000 f975 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <TIM2_IRQHandler+0x10>)
 8001052:	f001 f8d1 	bl	80021f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000011c 	.word	0x2000011c

08001060 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <displayTrafficLed>:
#include "traffic_light.h"



void displayTrafficLed(uint8_t green_al, uint8_t yellow_al, uint8_t red_al,
		 	 	 	 	 uint8_t green_lf, uint8_t yellow_lf, uint8_t red_lf){
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4604      	mov	r4, r0
 8001074:	4608      	mov	r0, r1
 8001076:	4611      	mov	r1, r2
 8001078:	461a      	mov	r2, r3
 800107a:	4623      	mov	r3, r4
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	4603      	mov	r3, r0
 8001080:	71bb      	strb	r3, [r7, #6]
 8001082:	460b      	mov	r3, r1
 8001084:	717b      	strb	r3, [r7, #5]
 8001086:	4613      	mov	r3, r2
 8001088:	713b      	strb	r3, [r7, #4]
	//above and low
	HAL_GPIO_WritePin(LED_GREEN_AL_GPIO_Port, LED_GREEN_AL_Pin, green_al);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	461a      	mov	r2, r3
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	4814      	ldr	r0, [pc, #80]	; (80010e4 <displayTrafficLed+0x78>)
 8001092:	f000 fc08 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_AL_GPIO_Port, LED_YELLOW_AL_Pin, yellow_al);
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	461a      	mov	r2, r3
 800109a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109e:	4811      	ldr	r0, [pc, #68]	; (80010e4 <displayTrafficLed+0x78>)
 80010a0:	f000 fc01 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_AL_GPIO_Port, LED_RED_AL_Pin, red_al);
 80010a4:	797b      	ldrb	r3, [r7, #5]
 80010a6:	461a      	mov	r2, r3
 80010a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <displayTrafficLed+0x78>)
 80010ae:	f000 fbfa 	bl	80018a6 <HAL_GPIO_WritePin>
	// left and right
	HAL_GPIO_WritePin(LED_GREEN_LR_GPIO_Port, LED_GREEN_LR_Pin, green_lf);
 80010b2:	793b      	ldrb	r3, [r7, #4]
 80010b4:	461a      	mov	r2, r3
 80010b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ba:	480a      	ldr	r0, [pc, #40]	; (80010e4 <displayTrafficLed+0x78>)
 80010bc:	f000 fbf3 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_LR_GPIO_Port, LED_YELLOW_LR_Pin, yellow_lf);
 80010c0:	7e3b      	ldrb	r3, [r7, #24]
 80010c2:	461a      	mov	r2, r3
 80010c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <displayTrafficLed+0x78>)
 80010ca:	f000 fbec 	bl	80018a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port, LED_RED_LR_Pin, red_lf);
 80010ce:	7f3b      	ldrb	r3, [r7, #28]
 80010d0:	461a      	mov	r2, r3
 80010d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <displayTrafficLed+0x78>)
 80010d8:	f000 fbe5 	bl	80018a6 <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <led_red_and_green>:


void led_red_and_green(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af02      	add	r7, sp, #8

	displayTrafficLed(OFF, OFF, ON,
 80010ee:	2300      	movs	r3, #0
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	2300      	movs	r3, #0
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	2201      	movs	r2, #1
 80010fa:	2100      	movs	r1, #0
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ffb5 	bl	800106c <displayTrafficLed>
						ON, OFF, OFF);
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <led_red_and_yellow>:

void led_red_and_yellow(){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af02      	add	r7, sp, #8
	displayTrafficLed(OFF, OFF, ON,
 800110e:	2300      	movs	r3, #0
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	2301      	movs	r3, #1
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	2201      	movs	r2, #1
 800111a:	2100      	movs	r1, #0
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff ffa5 	bl	800106c <displayTrafficLed>
						OFF, ON, OFF);
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <led_green_and_red>:

void led_green_and_red(){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af02      	add	r7, sp, #8
	displayTrafficLed(ON, OFF, OFF,
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	2300      	movs	r3, #0
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff ff95 	bl	800106c <displayTrafficLed>
						OFF, OFF, ON);
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <led_yellow_and_red>:

void led_yellow_and_red(){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af02      	add	r7, sp, #8
	displayTrafficLed(OFF, ON, OFF,
 800114e:	2301      	movs	r3, #1
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	2300      	movs	r3, #0
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2300      	movs	r3, #0
 8001158:	2200      	movs	r2, #0
 800115a:	2101      	movs	r1, #1
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff ff85 	bl	800106c <displayTrafficLed>
						OFF, OFF, ON);
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <Blinkred>:



uint8_t toggle = HIGH;
void Blinkred(){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af02      	add	r7, sp, #8
	if(toggle == HIGH){
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <Blinkred+0x4c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d10d      	bne.n	8001192 <Blinkred+0x2a>
		displayTrafficLed(OFF, OFF, ON,
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2300      	movs	r3, #0
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	2201      	movs	r2, #1
 8001182:	2100      	movs	r1, #0
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff ff71 	bl	800106c <displayTrafficLed>
							OFF, OFF, ON);
		// toggle state
		toggle = LOW;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <Blinkred+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
							OFF, OFF, OFF);
		// toggle state
		toggle = HIGH;
	}

}
 8001190:	e00c      	b.n	80011ac <Blinkred+0x44>
		displayTrafficLed(OFF, OFF, OFF,
 8001192:	2300      	movs	r3, #0
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2300      	movs	r3, #0
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff ff63 	bl	800106c <displayTrafficLed>
		toggle = HIGH;
 80011a6:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <Blinkred+0x4c>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000010 	.word	0x20000010

080011b8 <Blinkyellow>:
void Blinkyellow(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af02      	add	r7, sp, #8
	if(toggle == HIGH){
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <Blinkyellow+0x4c>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d10d      	bne.n	80011e2 <Blinkyellow+0x2a>
		displayTrafficLed(OFF, ON, OFF,
 80011c6:	2300      	movs	r3, #0
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	2301      	movs	r3, #1
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2300      	movs	r3, #0
 80011d0:	2200      	movs	r2, #0
 80011d2:	2101      	movs	r1, #1
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff ff49 	bl	800106c <displayTrafficLed>
							OFF, ON, OFF);
		// toggle state
		toggle = LOW;
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <Blinkyellow+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
		displayTrafficLed(OFF, OFF, OFF,
							OFF, OFF, OFF);
		// toggle state
		toggle = HIGH;
	}
}
 80011e0:	e00c      	b.n	80011fc <Blinkyellow+0x44>
		displayTrafficLed(OFF, OFF, OFF,
 80011e2:	2300      	movs	r3, #0
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	2300      	movs	r3, #0
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2300      	movs	r3, #0
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff ff3b 	bl	800106c <displayTrafficLed>
		toggle = HIGH;
 80011f6:	4b03      	ldr	r3, [pc, #12]	; (8001204 <Blinkyellow+0x4c>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000010 	.word	0x20000010

08001208 <Blinkgreen>:
void Blinkgreen(){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af02      	add	r7, sp, #8
	if(toggle == HIGH){
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <Blinkgreen+0x4c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d10d      	bne.n	8001232 <Blinkgreen+0x2a>
		displayTrafficLed(ON, OFF, OFF,
 8001216:	2300      	movs	r3, #0
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	2300      	movs	r3, #0
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff ff21 	bl	800106c <displayTrafficLed>
							ON, OFF, OFF);
		// toggle state
		toggle = LOW;
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <Blinkgreen+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
		displayTrafficLed(OFF, OFF, OFF,
							OFF, OFF, OFF);
		// toggle state
		toggle = HIGH;
	}
}
 8001230:	e00c      	b.n	800124c <Blinkgreen+0x44>
		displayTrafficLed(OFF, OFF, OFF,
 8001232:	2300      	movs	r3, #0
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2300      	movs	r3, #0
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ff13 	bl	800106c <displayTrafficLed>
		toggle = HIGH;
 8001246:	4b03      	ldr	r3, [pc, #12]	; (8001254 <Blinkgreen+0x4c>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000010 	.word	0x20000010

08001258 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001258:	f7ff ff02 	bl	8001060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800125e:	490c      	ldr	r1, [pc, #48]	; (8001290 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001260:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a09      	ldr	r2, [pc, #36]	; (8001298 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001274:	4c09      	ldr	r4, [pc, #36]	; (800129c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001282:	f001 faf9 	bl	8002878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001286:	f7ff fca9 	bl	8000bdc <main>
  bx lr
 800128a:	4770      	bx	lr
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001294:	08002914 	.word	0x08002914
  ldr r2, =_sbss
 8001298:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800129c:	20000168 	.word	0x20000168

080012a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC1_2_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_Init+0x28>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_Init+0x28>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 f923 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ba:	200f      	movs	r0, #15
 80012bc:	f000 f808 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c0:	f7ff fe46 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40022000 	.word	0x40022000

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x54>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x58>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f93b 	bl	800156a <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 f903 	bl	8001516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_InitTick+0x5c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000000c 	.word	0x2000000c
 8001328:	20000018 	.word	0x20000018
 800132c:	20000014 	.word	0x20000014

08001330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_IncTick+0x1c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_IncTick+0x20>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a03      	ldr	r2, [pc, #12]	; (8001350 <HAL_IncTick+0x20>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	20000018 	.word	0x20000018
 8001350:	20000164 	.word	0x20000164

08001354 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b02      	ldr	r3, [pc, #8]	; (8001364 <HAL_GetTick+0x10>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	20000164 	.word	0x20000164

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4906      	ldr	r1, [pc, #24]	; (8001400 <__NVIC_EnableIRQ+0x34>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f7ff ff90 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff2d 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff42 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff90 	bl	8001458 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5f 	bl	8001404 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff35 	bl	80013cc <__NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffa2 	bl	80014bc <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	b480      	push	{r7}
 8001586:	b08b      	sub	sp, #44	; 0x2c
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001596:	e148      	b.n	800182a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001598:	2201      	movs	r2, #1
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	f040 8137 	bne.w	8001824 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4aa3      	ldr	r2, [pc, #652]	; (8001848 <HAL_GPIO_Init+0x2c4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d05e      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015c0:	4aa1      	ldr	r2, [pc, #644]	; (8001848 <HAL_GPIO_Init+0x2c4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d875      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015c6:	4aa1      	ldr	r2, [pc, #644]	; (800184c <HAL_GPIO_Init+0x2c8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d058      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015cc:	4a9f      	ldr	r2, [pc, #636]	; (800184c <HAL_GPIO_Init+0x2c8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d86f      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015d2:	4a9f      	ldr	r2, [pc, #636]	; (8001850 <HAL_GPIO_Init+0x2cc>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d052      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015d8:	4a9d      	ldr	r2, [pc, #628]	; (8001850 <HAL_GPIO_Init+0x2cc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d869      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015de:	4a9d      	ldr	r2, [pc, #628]	; (8001854 <HAL_GPIO_Init+0x2d0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d04c      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015e4:	4a9b      	ldr	r2, [pc, #620]	; (8001854 <HAL_GPIO_Init+0x2d0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d863      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015ea:	4a9b      	ldr	r2, [pc, #620]	; (8001858 <HAL_GPIO_Init+0x2d4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d046      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015f0:	4a99      	ldr	r2, [pc, #612]	; (8001858 <HAL_GPIO_Init+0x2d4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d85d      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d82a      	bhi.n	8001650 <HAL_GPIO_Init+0xcc>
 80015fa:	2b12      	cmp	r3, #18
 80015fc:	d859      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015fe:	a201      	add	r2, pc, #4	; (adr r2, 8001604 <HAL_GPIO_Init+0x80>)
 8001600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001604:	0800167f 	.word	0x0800167f
 8001608:	08001659 	.word	0x08001659
 800160c:	0800166b 	.word	0x0800166b
 8001610:	080016ad 	.word	0x080016ad
 8001614:	080016b3 	.word	0x080016b3
 8001618:	080016b3 	.word	0x080016b3
 800161c:	080016b3 	.word	0x080016b3
 8001620:	080016b3 	.word	0x080016b3
 8001624:	080016b3 	.word	0x080016b3
 8001628:	080016b3 	.word	0x080016b3
 800162c:	080016b3 	.word	0x080016b3
 8001630:	080016b3 	.word	0x080016b3
 8001634:	080016b3 	.word	0x080016b3
 8001638:	080016b3 	.word	0x080016b3
 800163c:	080016b3 	.word	0x080016b3
 8001640:	080016b3 	.word	0x080016b3
 8001644:	080016b3 	.word	0x080016b3
 8001648:	08001661 	.word	0x08001661
 800164c:	08001675 	.word	0x08001675
 8001650:	4a82      	ldr	r2, [pc, #520]	; (800185c <HAL_GPIO_Init+0x2d8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d013      	beq.n	800167e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001656:	e02c      	b.n	80016b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	623b      	str	r3, [r7, #32]
          break;
 800165e:	e029      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	3304      	adds	r3, #4
 8001666:	623b      	str	r3, [r7, #32]
          break;
 8001668:	e024      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	3308      	adds	r3, #8
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e01f      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	330c      	adds	r3, #12
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e01a      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001686:	2304      	movs	r3, #4
 8001688:	623b      	str	r3, [r7, #32]
          break;
 800168a:	e013      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001694:	2308      	movs	r3, #8
 8001696:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	611a      	str	r2, [r3, #16]
          break;
 800169e:	e009      	b.n	80016b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a0:	2308      	movs	r3, #8
 80016a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	615a      	str	r2, [r3, #20]
          break;
 80016aa:	e003      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
          break;
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          break;
 80016b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2bff      	cmp	r3, #255	; 0xff
 80016b8:	d801      	bhi.n	80016be <HAL_GPIO_Init+0x13a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	e001      	b.n	80016c2 <HAL_GPIO_Init+0x13e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3304      	adds	r3, #4
 80016c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2bff      	cmp	r3, #255	; 0xff
 80016c8:	d802      	bhi.n	80016d0 <HAL_GPIO_Init+0x14c>
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x152>
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	3b08      	subs	r3, #8
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	210f      	movs	r1, #15
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	6a39      	ldr	r1, [r7, #32]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	431a      	orrs	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8090 	beq.w	8001824 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001704:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HAL_GPIO_Init+0x2dc>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a55      	ldr	r2, [pc, #340]	; (8001860 <HAL_GPIO_Init+0x2dc>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_GPIO_Init+0x2dc>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800171c:	4a51      	ldr	r2, [pc, #324]	; (8001864 <HAL_GPIO_Init+0x2e0>)
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001728:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a49      	ldr	r2, [pc, #292]	; (8001868 <HAL_GPIO_Init+0x2e4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00d      	beq.n	8001764 <HAL_GPIO_Init+0x1e0>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a48      	ldr	r2, [pc, #288]	; (800186c <HAL_GPIO_Init+0x2e8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d007      	beq.n	8001760 <HAL_GPIO_Init+0x1dc>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a47      	ldr	r2, [pc, #284]	; (8001870 <HAL_GPIO_Init+0x2ec>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d101      	bne.n	800175c <HAL_GPIO_Init+0x1d8>
 8001758:	2302      	movs	r3, #2
 800175a:	e004      	b.n	8001766 <HAL_GPIO_Init+0x1e2>
 800175c:	2303      	movs	r3, #3
 800175e:	e002      	b.n	8001766 <HAL_GPIO_Init+0x1e2>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_GPIO_Init+0x1e2>
 8001764:	2300      	movs	r3, #0
 8001766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001768:	f002 0203 	and.w	r2, r2, #3
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	4093      	lsls	r3, r2
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001776:	493b      	ldr	r1, [pc, #236]	; (8001864 <HAL_GPIO_Init+0x2e0>)
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4937      	ldr	r1, [pc, #220]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800179e:	4b35      	ldr	r3, [pc, #212]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	4933      	ldr	r1, [pc, #204]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017b8:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	492d      	ldr	r1, [pc, #180]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60cb      	str	r3, [r1, #12]
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017c6:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4929      	ldr	r1, [pc, #164]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4923      	ldr	r1, [pc, #140]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	491f      	ldr	r1, [pc, #124]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4919      	ldr	r1, [pc, #100]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	43db      	mvns	r3, r3
 800181e:	4915      	ldr	r1, [pc, #84]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 8001820:	4013      	ands	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3301      	adds	r3, #1
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	f47f aeaf 	bne.w	8001598 <HAL_GPIO_Init+0x14>
  }
}
 800183a:	bf00      	nop
 800183c:	bf00      	nop
 800183e:	372c      	adds	r7, #44	; 0x2c
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	10320000 	.word	0x10320000
 800184c:	10310000 	.word	0x10310000
 8001850:	10220000 	.word	0x10220000
 8001854:	10210000 	.word	0x10210000
 8001858:	10120000 	.word	0x10120000
 800185c:	10110000 	.word	0x10110000
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	40010800 	.word	0x40010800
 800186c:	40010c00 	.word	0x40010c00
 8001870:	40011000 	.word	0x40011000
 8001874:	40010400 	.word	0x40010400

08001878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e001      	b.n	800189a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	807b      	strh	r3, [r7, #2]
 80018b2:	4613      	mov	r3, r2
 80018b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b6:	787b      	ldrb	r3, [r7, #1]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018bc:	887a      	ldrh	r2, [r7, #2]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018c2:	e003      	b.n	80018cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	041a      	lsls	r2, r3, #16
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	611a      	str	r2, [r3, #16]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018e8:	887a      	ldrh	r2, [r7, #2]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4013      	ands	r3, r2
 80018ee:	041a      	lsls	r2, r3, #16
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	400b      	ands	r3, r1
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	611a      	str	r2, [r3, #16]
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e26c      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8087 	beq.w	8001a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001928:	4b92      	ldr	r3, [pc, #584]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b04      	cmp	r3, #4
 8001932:	d00c      	beq.n	800194e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001934:	4b8f      	ldr	r3, [pc, #572]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d112      	bne.n	8001966 <HAL_RCC_OscConfig+0x5e>
 8001940:	4b8c      	ldr	r3, [pc, #560]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194c:	d10b      	bne.n	8001966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194e:	4b89      	ldr	r3, [pc, #548]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d06c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x12c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d168      	bne.n	8001a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e246      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x76>
 8001970:	4b80      	ldr	r3, [pc, #512]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a7f      	ldr	r2, [pc, #508]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	e02e      	b.n	80019dc <HAL_RCC_OscConfig+0xd4>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x98>
 8001986:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7a      	ldr	r2, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 800198c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b78      	ldr	r3, [pc, #480]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a77      	ldr	r2, [pc, #476]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e01d      	b.n	80019dc <HAL_RCC_OscConfig+0xd4>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0xbc>
 80019aa:	4b72      	ldr	r3, [pc, #456]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a71      	ldr	r2, [pc, #452]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e00b      	b.n	80019dc <HAL_RCC_OscConfig+0xd4>
 80019c4:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a6a      	ldr	r2, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a67      	ldr	r2, [pc, #412]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fcb6 	bl	8001354 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff fcb2 	bl	8001354 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e1fa      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0xe4>
 8001a0a:	e014      	b.n	8001a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fca2 	bl	8001354 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fc9e 	bl	8001354 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1e6      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x10c>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d063      	beq.n	8001b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a42:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00b      	beq.n	8001a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d11c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x18c>
 8001a5a:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d116      	bne.n	8001a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_RCC_OscConfig+0x176>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e1ba      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4939      	ldr	r1, [pc, #228]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	e03a      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9c:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fc57 	bl	8001354 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fc53 	bl	8001354 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e19b      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4927      	ldr	r1, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e015      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fc36 	bl	8001354 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aec:	f7ff fc32 	bl	8001354 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e17a      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d03a      	beq.n	8001b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d019      	beq.n	8001b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b24:	f7ff fc16 	bl	8001354 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fc12 	bl	8001354 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e15a      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f000 fa9a 	bl	8002084 <RCC_Delay>
 8001b50:	e01c      	b.n	8001b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b58:	f7ff fbfc 	bl	8001354 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5e:	e00f      	b.n	8001b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b60:	f7ff fbf8 	bl	8001354 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d908      	bls.n	8001b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e140      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	42420000 	.word	0x42420000
 8001b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	4b9e      	ldr	r3, [pc, #632]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e9      	bne.n	8001b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80a6 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9e:	4b97      	ldr	r3, [pc, #604]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10d      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	4b94      	ldr	r3, [pc, #592]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4a93      	ldr	r2, [pc, #588]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	61d3      	str	r3, [r2, #28]
 8001bb6:	4b91      	ldr	r3, [pc, #580]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc6:	4b8e      	ldr	r3, [pc, #568]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d118      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd2:	4b8b      	ldr	r3, [pc, #556]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a8a      	ldr	r2, [pc, #552]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bde:	f7ff fbb9 	bl	8001354 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be6:	f7ff fbb5 	bl	8001354 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b64      	cmp	r3, #100	; 0x64
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e0fd      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf8:	4b81      	ldr	r3, [pc, #516]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x312>
 8001c0c:	4b7b      	ldr	r3, [pc, #492]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a7a      	ldr	r2, [pc, #488]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	e02d      	b.n	8001c76 <HAL_RCC_OscConfig+0x36e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x334>
 8001c22:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a75      	ldr	r2, [pc, #468]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6213      	str	r3, [r2, #32]
 8001c2e:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a72      	ldr	r2, [pc, #456]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	e01c      	b.n	8001c76 <HAL_RCC_OscConfig+0x36e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b05      	cmp	r3, #5
 8001c42:	d10c      	bne.n	8001c5e <HAL_RCC_OscConfig+0x356>
 8001c44:	4b6d      	ldr	r3, [pc, #436]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4a6c      	ldr	r2, [pc, #432]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6213      	str	r3, [r2, #32]
 8001c50:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a69      	ldr	r2, [pc, #420]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6213      	str	r3, [r2, #32]
 8001c5c:	e00b      	b.n	8001c76 <HAL_RCC_OscConfig+0x36e>
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a66      	ldr	r2, [pc, #408]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a63      	ldr	r2, [pc, #396]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d015      	beq.n	8001caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fb69 	bl	8001354 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7ff fb65 	bl	8001354 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0ab      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9c:	4b57      	ldr	r3, [pc, #348]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ee      	beq.n	8001c86 <HAL_RCC_OscConfig+0x37e>
 8001ca8:	e014      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fb53 	bl	8001354 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7ff fb4f 	bl	8001354 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e095      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc8:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ee      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d105      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	4b48      	ldr	r3, [pc, #288]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a47      	ldr	r2, [pc, #284]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8081 	beq.w	8001df2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf0:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d061      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d146      	bne.n	8001d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <HAL_RCC_OscConfig+0x4fc>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7ff fb23 	bl	8001354 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d12:	f7ff fb1f 	bl	8001354 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e067      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d24:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d38:	d108      	bne.n	8001d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d3a:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	492d      	ldr	r1, [pc, #180]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a19      	ldr	r1, [r3, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	4927      	ldr	r1, [pc, #156]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_RCC_OscConfig+0x4fc>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff faf3 	bl	8001354 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7ff faef 	bl	8001354 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e037      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x46a>
 8001d90:	e02f      	b.n	8001df2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d92:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <HAL_RCC_OscConfig+0x4fc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fadc 	bl	8001354 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da0:	f7ff fad8 	bl	8001354 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e020      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x498>
 8001dbe:	e018      	b.n	8001df2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e013      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40007000 	.word	0x40007000
 8001e04:	42420060 	.word	0x42420060

08001e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0d0      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d910      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 0207 	bic.w	r2, r3, #7
 8001e32:	4965      	ldr	r1, [pc, #404]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b63      	ldr	r3, [pc, #396]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0b8      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e64:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a58      	ldr	r2, [pc, #352]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e7c:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	494d      	ldr	r1, [pc, #308]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d040      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d115      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e07f      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e073      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e06b      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4936      	ldr	r1, [pc, #216]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7ff fa2c 	bl	8001354 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7ff fa28 	bl	8001354 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e053      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d210      	bcs.n	8001f58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	4922      	ldr	r1, [pc, #136]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e032      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4916      	ldr	r1, [pc, #88]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f96:	f000 f821 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	490a      	ldr	r1, [pc, #40]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f98a 	bl	80012d0 <HAL_InitTick>

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	080028e8 	.word	0x080028e8
 8001fd4:	2000000c 	.word	0x2000000c
 8001fd8:	20000014 	.word	0x20000014

08001fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d002      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x30>
 8002006:	2b08      	cmp	r3, #8
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x36>
 800200a:	e027      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_GetSysClockFreq+0x98>)
 800200e:	613b      	str	r3, [r7, #16]
      break;
 8002010:	e027      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	0c9b      	lsrs	r3, r3, #18
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d010      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_GetSysClockFreq+0x94>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	0c5b      	lsrs	r3, r3, #17
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	4a11      	ldr	r2, [pc, #68]	; (800207c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <HAL_RCC_GetSysClockFreq+0x98>)
 800203e:	fb02 f203 	mul.w	r2, r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	e004      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	613b      	str	r3, [r7, #16]
      break;
 800205a:	e002      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_GetSysClockFreq+0x98>)
 800205e:	613b      	str	r3, [r7, #16]
      break;
 8002060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002062:	693b      	ldr	r3, [r7, #16]
}
 8002064:	4618      	mov	r0, r3
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	007a1200 	.word	0x007a1200
 8002078:	080028f8 	.word	0x080028f8
 800207c:	08002908 	.word	0x08002908
 8002080:	003d0900 	.word	0x003d0900

08002084 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <RCC_Delay+0x34>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <RCC_Delay+0x38>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0a5b      	lsrs	r3, r3, #9
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020a0:	bf00      	nop
  }
  while (Delay --);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1e5a      	subs	r2, r3, #1
 80020a6:	60fa      	str	r2, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f9      	bne.n	80020a0 <RCC_Delay+0x1c>
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	2000000c 	.word	0x2000000c
 80020bc:	10624dd3 	.word	0x10624dd3

080020c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e041      	b.n	8002156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe ff64 	bl	8000fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3304      	adds	r3, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	4610      	mov	r0, r2
 8002100:	f000 fa56 	bl	80025b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d001      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e035      	b.n	80021e4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <HAL_TIM_Base_Start_IT+0x90>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_TIM_Base_Start_IT+0x4e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a2:	d004      	beq.n	80021ae <HAL_TIM_Base_Start_IT+0x4e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_TIM_Base_Start_IT+0x94>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d111      	bne.n	80021d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b06      	cmp	r3, #6
 80021be:	d010      	beq.n	80021e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d0:	e007      	b.n	80021e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40012c00 	.word	0x40012c00
 80021f4:	40000400 	.word	0x40000400

080021f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d020      	beq.n	800225c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01b      	beq.n	800225c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0202 	mvn.w	r2, #2
 800222c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f998 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 8002248:	e005      	b.n	8002256 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f98b 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f99a 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d020      	beq.n	80022a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01b      	beq.n	80022a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0204 	mvn.w	r2, #4
 8002278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2202      	movs	r2, #2
 800227e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f972 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 8002294:	e005      	b.n	80022a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f965 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f974 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d020      	beq.n	80022f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01b      	beq.n	80022f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0208 	mvn.w	r2, #8
 80022c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2204      	movs	r2, #4
 80022ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f94c 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 80022e0:	e005      	b.n	80022ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f93f 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f94e 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d020      	beq.n	8002340 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0210 	mvn.w	r2, #16
 8002310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2208      	movs	r2, #8
 8002316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f926 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 800232c:	e005      	b.n	800233a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f919 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f928 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0201 	mvn.w	r2, #1
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fc28 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fa6f 	bl	8002866 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8f8 	bl	800259c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00c      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0220 	mvn.w	r2, #32
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa42 	bl	8002854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_TIM_ConfigClockSource+0x1c>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e0b4      	b.n	800255e <HAL_TIM_ConfigClockSource+0x186>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800241a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242c:	d03e      	beq.n	80024ac <HAL_TIM_ConfigClockSource+0xd4>
 800242e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002432:	f200 8087 	bhi.w	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 8002436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243a:	f000 8086 	beq.w	800254a <HAL_TIM_ConfigClockSource+0x172>
 800243e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002442:	d87f      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 8002444:	2b70      	cmp	r3, #112	; 0x70
 8002446:	d01a      	beq.n	800247e <HAL_TIM_ConfigClockSource+0xa6>
 8002448:	2b70      	cmp	r3, #112	; 0x70
 800244a:	d87b      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 800244c:	2b60      	cmp	r3, #96	; 0x60
 800244e:	d050      	beq.n	80024f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002450:	2b60      	cmp	r3, #96	; 0x60
 8002452:	d877      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 8002454:	2b50      	cmp	r3, #80	; 0x50
 8002456:	d03c      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002458:	2b50      	cmp	r3, #80	; 0x50
 800245a:	d873      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d058      	beq.n	8002512 <HAL_TIM_ConfigClockSource+0x13a>
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d86f      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 8002464:	2b30      	cmp	r3, #48	; 0x30
 8002466:	d064      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15a>
 8002468:	2b30      	cmp	r3, #48	; 0x30
 800246a:	d86b      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 800246c:	2b20      	cmp	r3, #32
 800246e:	d060      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15a>
 8002470:	2b20      	cmp	r3, #32
 8002472:	d867      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 8002474:	2b00      	cmp	r3, #0
 8002476:	d05c      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15a>
 8002478:	2b10      	cmp	r3, #16
 800247a:	d05a      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15a>
 800247c:	e062      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f000 f96a 	bl	8002766 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	609a      	str	r2, [r3, #8]
      break;
 80024aa:	e04f      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6899      	ldr	r1, [r3, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f000 f953 	bl	8002766 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ce:	609a      	str	r2, [r3, #8]
      break;
 80024d0:	e03c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6859      	ldr	r1, [r3, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	461a      	mov	r2, r3
 80024e0:	f000 f8ca 	bl	8002678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2150      	movs	r1, #80	; 0x50
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f921 	bl	8002732 <TIM_ITRx_SetConfig>
      break;
 80024f0:	e02c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	461a      	mov	r2, r3
 8002500:	f000 f8e8 	bl	80026d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2160      	movs	r1, #96	; 0x60
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f911 	bl	8002732 <TIM_ITRx_SetConfig>
      break;
 8002510:	e01c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6859      	ldr	r1, [r3, #4]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	461a      	mov	r2, r3
 8002520:	f000 f8aa 	bl	8002678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2140      	movs	r1, #64	; 0x40
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f901 	bl	8002732 <TIM_ITRx_SetConfig>
      break;
 8002530:	e00c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f000 f8f8 	bl	8002732 <TIM_ITRx_SetConfig>
      break;
 8002542:	e003      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e000      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800254a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
	...

080025b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a2b      	ldr	r2, [pc, #172]	; (8002670 <TIM_Base_SetConfig+0xc0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <TIM_Base_SetConfig+0x28>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ce:	d003      	beq.n	80025d8 <TIM_Base_SetConfig+0x28>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a28      	ldr	r2, [pc, #160]	; (8002674 <TIM_Base_SetConfig+0xc4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d108      	bne.n	80025ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a20      	ldr	r2, [pc, #128]	; (8002670 <TIM_Base_SetConfig+0xc0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <TIM_Base_SetConfig+0x52>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f8:	d003      	beq.n	8002602 <TIM_Base_SetConfig+0x52>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a1d      	ldr	r2, [pc, #116]	; (8002674 <TIM_Base_SetConfig+0xc4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d108      	bne.n	8002614 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <TIM_Base_SetConfig+0xc0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d103      	bne.n	8002648 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f023 0201 	bic.w	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	611a      	str	r2, [r3, #16]
  }
}
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40000400 	.word	0x40000400

08002678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	f023 0201 	bic.w	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f023 030a 	bic.w	r3, r3, #10
 80026b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	621a      	str	r2, [r3, #32]
}
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	f023 0210 	bic.w	r2, r3, #16
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	031b      	lsls	r3, r3, #12
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002710:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	621a      	str	r2, [r3, #32]
}
 8002728:	bf00      	nop
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	f043 0307 	orr.w	r3, r3, #7
 8002754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	609a      	str	r2, [r3, #8]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002766:	b480      	push	{r7}
 8002768:	b087      	sub	sp, #28
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002780:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	021a      	lsls	r2, r3, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	431a      	orrs	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4313      	orrs	r3, r2
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	609a      	str	r2, [r3, #8]
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e041      	b.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d004      	beq.n	8002814 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d10c      	bne.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	4313      	orrs	r3, r2
 8002824:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40012c00 	.word	0x40012c00
 8002850:	40000400 	.word	0x40000400

08002854 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	2600      	movs	r6, #0
 800287c:	4d0c      	ldr	r5, [pc, #48]	; (80028b0 <__libc_init_array+0x38>)
 800287e:	4c0d      	ldr	r4, [pc, #52]	; (80028b4 <__libc_init_array+0x3c>)
 8002880:	1b64      	subs	r4, r4, r5
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	42a6      	cmp	r6, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	f000 f822 	bl	80028d0 <_init>
 800288c:	2600      	movs	r6, #0
 800288e:	4d0a      	ldr	r5, [pc, #40]	; (80028b8 <__libc_init_array+0x40>)
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <__libc_init_array+0x44>)
 8002892:	1b64      	subs	r4, r4, r5
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	42a6      	cmp	r6, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a0:	4798      	blx	r3
 80028a2:	3601      	adds	r6, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028aa:	4798      	blx	r3
 80028ac:	3601      	adds	r6, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	0800290c 	.word	0x0800290c
 80028b4:	0800290c 	.word	0x0800290c
 80028b8:	0800290c 	.word	0x0800290c
 80028bc:	08002910 	.word	0x08002910

080028c0 <memset>:
 80028c0:	4603      	mov	r3, r0
 80028c2:	4402      	add	r2, r0
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d100      	bne.n	80028ca <memset+0xa>
 80028c8:	4770      	bx	lr
 80028ca:	f803 1b01 	strb.w	r1, [r3], #1
 80028ce:	e7f9      	b.n	80028c4 <memset+0x4>

080028d0 <_init>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr

080028dc <_fini>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	bf00      	nop
 80028e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e2:	bc08      	pop	{r3}
 80028e4:	469e      	mov	lr, r3
 80028e6:	4770      	bx	lr
